name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: |
          docker build -t my-docker-image .
          docker tag my-docker-image ghcr.io/wfgen/zadanie2docker:latest

      - name: Install Clair
        run: |
          docker pull quay.io/coreos/clair:v4.1.1

      - name: Start Clair
        run: |
          docker run -d --name clair --network host -p 6060:6060 quay.io/coreos/clair:v4.1.1

      - name: Wait for Clair to start
        run: |
          sleep 10

      - name: Scan Docker image for vulnerabilities
        run: |
          docker exec clair clair-scanner --ip "$(hostname -I | awk '{print $1}')" -r report.json ghcr.io/wfgen/zadanie2docker:latest

      - name: Stop Clair
        run: |
          docker stop clair

      - name: Display vulnerabilities report
        run: |
          cat report.json

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GITHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest image version
        id: get-version
        run: |
          echo "::set-output name=version::$(docker images --format "{{.Tag}}" ghcr.io/wfgen/zadanie2docker | sort -V | tail -1)"

      - name: Generate new image version
        id: generate-version
        run: |
          version=$(python generate_version.py "${{ steps.get-version.outputs.version }}")
          echo "::set-output name=version::${version}"

      - name: Tag and push Docker image
        run: |
          docker tag my-docker-image ghcr.io/wfgen/zadanie2docker:${{ steps.generate-version.outputs.version }}
          docker push ghcr.io/wfgen/zadanie2docker:${{ steps.generate-version.outputs.version }}

      - name: Show version
        run: |
          echo "Image version: ${{ steps.generate-version.outputs.version }}"
